import React, { useState, useEffect } from 'react';
import UserService from '../service/UserService';
import { useNavigate, useParams } from 'react-router-dom';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from '../ui/button';
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Sheet, SheetClose, SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";

export default function ProfilePage({ isAdmin }) {
  const [BooksList, setBooksList] = useState([]); // Lista de livros
  const [error, setError] = useState(null); // Estado de erro

  // Estado dos dados do livro
  const [bookData, setBookData] = useState({
    titulo: '',
    autor: '',
    isbn: '',
    categoria: '',
    quantidade: ''
  });

  const navigate = useNavigate();
  const { bookIsbn } = useParams(); // Parâmetro de ISBN do livro

  useEffect(() => {
    fetchBooks();
  }, []);

  // Função para buscar todos os livros
  const fetchBooks = async () => {
    try {
      const response = await UserService.getAllBooks();
      console.log('Livros buscados:', response);
      setBooksList(response.ourBookList || []);
    } catch (error) {
      console.error('Erro ao buscar livros:', error);
      setError('Erro ao buscar livros');
    }
  };

  useEffect(() => {
    if (bookIsbn) {
      fetchBookDataByIsbn(bookIsbn); // Busca os dados do livro pelo ISBN
    }
  }, [bookIsbn]);

  // Função para buscar dados do livro pelo ISBN
  const fetchBookDataByIsbn = async (bookIsbn) => {
    try {
      const token = localStorage.getItem('token');
      const response = await UserService.getBookByIsbn(bookIsbn, token);
      const { titulo, autor, isbn, categoria, quantidade } = response.book;
      setBookData({ titulo, autor, isbn, categoria, quantidade });
    } catch (error) {
      console.error('Erro ao buscar dados do livro:', error);
    }
  };

  // Manipula a mudança de entrada no formulário
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setBookData((prevBookData) => ({
      ...prevBookData,
      [name]: value
    }));
  };

  // Manipula o envio do formulário
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('token');
      const res = await UserService.updateBook(bookData.isbn, bookData, token);
      console.log(res);
      fetchBooks();

    } catch (error) {
      console.error('Erro ao atualizar livro:', error);
      alert('Erro ao atualizar livro');
    }
  };

  // Manipula o envio do formulário para adicionar novo livro
  const handleNewSubmit = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('token');
      const res = await UserService.registerBook(bookData, token);
      console.log(res);
      fetchBooks(); // Atualiza a lista de livros após adicionar um novo

      // Limpa os dados do formulário após adicionar
      setBookData({
        titulo: '',
        autor: '',
        isbn: '',
        categoria: '',
        quantidade: ''
      });

    } catch (error) {
      console.error('Erro ao adicionar livro:', error);
      alert('Erro ao adicionar livro');
    }
  };

  // Manipula o clique para atualizar os dados do livro
  const handleUpdateClick = async (isbn) => {
    await fetchBookDataByIsbn(isbn);
  };
  
  const deleteBook = async (bookIsbn) => {
    try {
      const confirmDelete = window.confirm('Deseja realmente deletar este livro??');

      const token = localStorage.getItem('token');
      if (confirmDelete) {
        await UserService.deleteBooks(bookIsbn, token);
        fetchBooks();
      }
    } catch (error) {
      console.error('Error deleting user:', error);
    }
  };

  return (
    <main className='h-screen flex justify-center items-center bg-background text-foreground ml-4'>
      <div className="w-full max-w-screen-xl rounded-md overflow-hidden border bg-card">
        <Table className="shadow-md table-fixed w-full rounded-lg">
          <TableHeader>
            <TableRow>
              <TableHead className="text-center" style={{ width: '2%' }}>ID</TableHead>
              <TableHead className="text-center" style={{ width: '15%' }}>Título</TableHead>
              <TableHead className="text-center" style={{ width: '13%' }}>Autor</TableHead>
              <TableHead className="text-center" style={{ width: '15%' }}>ISBN</TableHead>
              <TableHead className="text-center" style={{ width: '15%' }}>Categoria</TableHead> 
              <TableHead className="text-center" style={{ width: '15%' }}>Quantidade</TableHead>
              <TableHead className="text-center" >Ações</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {BooksList.length > 0 ? (
              BooksList.map((book) => (
                <TableRow key={book.id}>
                  <TableCell className="text-center">{book.id}</TableCell>
                  <TableCell className="text-center">{book.titulo}</TableCell>
                  <TableCell className="text-center">{book.autor}</TableCell>
                  <TableCell className="text-center">{book.isbn}</TableCell>
                  <TableCell className="text-center">{book.categoria}</TableCell>
                  <TableCell className="text-center">{book.quantidade}</TableCell>
                  {isAdmin && (
                    <TableCell className="text-center flex">
                      <Sheet>
                        <SheetTrigger asChild>
                          <Button variant="outline" onClick={() => handleUpdateClick(book.isbn)}>Alterar</Button>
                        </SheetTrigger>
                        <SheetContent>
                          <SheetHeader>
                            <SheetTitle>Editar Livro</SheetTitle>
                            <SheetDescription>
                              Faça alterações no seu perfil aqui. Clique em salvar quando terminar.
                            </SheetDescription>
                          </SheetHeader>
                          <form onSubmit={handleSubmit}>
                            <div className="grid gap-4 py-4">
                              <div className="grid grid-cols-5 items-center gap-4">
                                <Label htmlFor="titulo" className="text-right">
                                  Título:
                                </Label>
                                <Input type="text" name="titulo" value={bookData.titulo} onChange={handleInputChange} className="col-span-4" />
                              </div>
                              <div className="grid grid-cols-5 gap-4 items-center">
                                <Label htmlFor="autor" className="text-right">
                                  Autor:
                                </Label>
                                <Input type="text" name="autor" value={bookData.autor} onChange={handleInputChange} className="col-span-4" />
                              </div>
                              <div className="grid grid-cols-5 gap-4 items-center">
                                <Label htmlFor="isbn" className="text-right">
                                  ISBN:
                                </Label>
                                <Input type="number" name="isbn" value={bookData.isbn} onChange={handleInputChange} className="col-span-4" />
                              </div>
                              <div className="grid grid-cols-4 gap-4 items-center">
                                <Label htmlFor="categoria" className="text-right">
                                  Categoria:
                                </Label>
                                <Input type="text" name="categoria" value={bookData.categoria} onChange={handleInputChange} className="col-span-3" />
                              </div>
                              <div className="grid grid-cols-4 gap-4 items-center">
                                <Label htmlFor="quantidade" className="text-right">
                                  Quantidade:
                                </Label>
                                <Input type="number" name="quantidade" value={bookData.quantidade} onChange={handleInputChange} className="col-span-3" />
                              </div>
                            </div>
                            <SheetFooter>
                              <SheetClose asChild>
                                <Button variant="outline" type="submit" className="bg-gray-200 text-black">Salvar Alterações</Button>
                              </SheetClose>
                            </SheetFooter>
                          </form>
                        </SheetContent>
                      </Sheet>
                      <Button className="ml-2" variant="destructive" onClick={() => deleteBook(book.isbn)}>Delete</Button>
                    </TableCell>
                  )}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={6} className="text-center">Nenhum livro encontrado</TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
        
        <div className="flex justify-center p-4"> 
          {isAdmin && (
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline">Adicionar Novo Livro</Button>
              </SheetTrigger>
              <SheetContent>
              <SheetHeader>
                <SheetTitle>Adicionar Livro</SheetTitle>
                <SheetDescription>
                  Adicione informações do novo livro. Clique em salvar quando terminar.
                </SheetDescription>
              </SheetHeader>
              <form onSubmit={handleNewSubmit}>
                <div className="grid gap-4 py-4">
                  <div className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor="titulo" className="text-right">
                      Título
                    </Label>
                    <Input type="text" name="titulo" value={bookData.titulo} onChange={handleInputChange} />
                  </div>
                  <div className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor="autor" className="text-right">
                      Autor
                    </Label>
                    <Input type="text" name="autor" value={bookData.autor} onChange={handleInputChange} className="col-span-3" />
                  </div>
                  <div className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor="isbn" className="text-right">
                      ISBN
                    </Label>
                    <Input type="number" name="isbn" value={bookData.isbn} onChange={handleInputChange} className="col-span-3" />
                  </div>
                  <div className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor="categoria" className="text-right">
                      Categoria
                    </Label>
                    <Input type="text" name="categoria" value={bookData.categoria} onChange={handleInputChange} className="col-span-3" />
                  </div>
                  <div className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor="quantidade" className="text-right">
                      Quantidade
                    </Label>
                    <Input type="number" name="quantidade" value={bookData.quantidade} onChange={handleInputChange} className="col-span-3" />
                  </div>
                </div>
                <SheetFooter>
                  <SheetClose asChild>
                    <Button variant="outline" type="submit" className="bg-gray-200 text-black">Salvar Alterações</Button>
                  </SheetClose>
                </SheetFooter>
              </form>
            </SheetContent>
          </Sheet>
          )}
        </div>
      </div>
      <section className="flex flex-col items-center justify-center bg-background h-full max-w-4xl w-full p-4">

      </section>
    </main>
  );
}
